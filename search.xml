<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python之pymem</title>
      <link href="/posts/965f1a06e804/"/>
      <url>/posts/965f1a06e804/</url>
      
        <content type="html"><![CDATA[<p>pymem：作为Windows 进程（32 位和 64 位）的 python 库，使用 pymem，您可以侵入 Windows 进程并操纵内存（读/写）。</p><h1 id="Python之pymem"><a href="#Python之pymem" class="headerlink" title="Python之pymem"></a>Python之pymem</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>方式1<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymem</span><br></pre></td></tr></table></figure></li><li>方式2<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymem[speed]</span><br></pre></td></tr></table></figure></li></ul><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymem <span class="keyword">import</span> Pymem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 Pymem 对象(单开)</span></span><br><span class="line">pm = Pymem(<span class="string">&quot;demo.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化多个 Pymem 对象(多开，pid唯一)</span></span><br><span class="line">pm = Pymem()</span><br><span class="line">pm.open_process_from_id(pid)</span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ul><li><p>方式1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymem <span class="keyword">import</span> Pymem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 Pymem 对象</span></span><br><span class="line">pm = Pymem(<span class="string">&quot;demo.exe&quot;</span>)</span><br><span class="line"><span class="comment"># 读取内存数据</span></span><br><span class="line">data = pm.read_int(address)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li><li><p>方式2 (推荐)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymem <span class="keyword">import</span> Pymem, memory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取内存数据</span></span><br><span class="line">pm = Pymem()</span><br><span class="line">pm.open_process_from_id(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># handle: pm.process_handle 进程句柄</span></span><br><span class="line">data = memory.read_int(pm.process_handle, address)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li></ul><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymem <span class="keyword">import</span> Pymem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 Pymem 对象</span></span><br><span class="line">pm = Pymem(<span class="string">&quot;demo.exe&quot;</span>)</span><br><span class="line"><span class="comment"># 写入内存数据</span></span><br><span class="line">pm.write_int(address, value)</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><code>Pymem(process_name)</code>：初始化一个 Pymem 对象，参数为进程名称。<ul><li><code>read_int(address)</code>：读取内存数据，参数为地址。</li><li><code>write_int(address, value)</code>：写入内存数据，参数为地址和值。</li><li><code>open_process_from_id(pid)</code>：打开一个进程，参数为进程ID。</li><li>…</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pymem.readthedocs.io/en/latest/">pymem文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pymem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph</title>
      <link href="/posts/2686b502fa11/"/>
      <url>/posts/2686b502fa11/</url>
      
        <content type="html"><![CDATA[<h1 id="知识体系汇总"><a href="#知识体系汇总" class="headerlink" title="知识体系汇总"></a>知识体系汇总</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href="/img/graph/frontend.webp">前端知识体系图</a></p><!-- ## 后端[后端知识体系图](/img/graph/backend.webp) --><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="/img/graph/javascript.webp">JavaScript知识体系图</a></p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p><a href="/img/graph/typescript.webp">TypeScript知识体系图</a></p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="/img/graph/node.webp">Node.js知识体系图</a></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p><a href="/img/graph/react.webp">React知识体系图</a></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><a href="/img/graph/vue.webp">Vue知识体系图</a></p><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><p><a href="/img/graph/flutter.webp">Flutter知识体系图</a></p><h3 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h3><p><a href="/img/graph/hybrid.webp">Hybrid知识体系图</a></p>]]></content>
      
      
      <categories>
          
          <category> graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knowledge graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - DFS &amp; BFS (JavaScript)</title>
      <link href="/posts/ae59a3a33a17/"/>
      <url>/posts/ae59a3a33a17/</url>
      
        <content type="html"><![CDATA[<h1 id="DFS-amp-BFS-JavaScript"><a href="#DFS-amp-BFS-JavaScript" class="headerlink" title="DFS &amp; BFS - JavaScript"></a>DFS &amp; BFS - JavaScript</h1><p>通常遍历树结构：深度优先遍历（DFS）和广度优先遍历（BFS）。</p><p><strong>树结构数据如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">          <span class="attr">children</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">          <span class="attr">children</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">          <span class="attr">children</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">          <span class="attr">children</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="收集节点值"><a href="#收集节点值" class="headerlink" title="收集节点值"></a>收集节点值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> collections = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">process</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || !arr.<span class="property">length</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = arr[i]</span><br><span class="line">      collections.<span class="title function_">push</span>(node.<span class="property">value</span>)</span><br><span class="line">      <span class="title function_">process</span>(node.<span class="property">children</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">process</span>([root])</span><br><span class="line">  <span class="keyword">return</span> collections</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜寻目标节点"><a href="#搜寻目标节点" class="headerlink" title="搜寻目标节点"></a>搜寻目标节点</h3><p>找到目标节点值，并返回多少步，未找到目标值，返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dfsSearch</span>(<span class="params">root, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> steps = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">process</span> = (<span class="params">nodes, target</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">value</span> === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> steps + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      steps++</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title function_">process</span>(node.<span class="property">children</span>, target)</span><br><span class="line">        <span class="keyword">if</span> (result !== -<span class="number">1</span>) <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">process</span>([root], target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h3 id="收集节点值-1"><a href="#收集节点值-1" class="headerlink" title="收集节点值"></a>收集节点值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bfs</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> collections = []</span><br><span class="line">  <span class="keyword">const</span> queue = [root]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">    collections.<span class="title function_">push</span>(node.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> node.<span class="property">children</span>) &#123;</span><br><span class="line">      queue.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> collections</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜寻目标节点-1"><a href="#搜寻目标节点-1" class="headerlink" title="搜寻目标节点"></a>搜寻目标节点</h3><p>找到目标节点值，并返回多少步，未找到目标值，返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bfsSearch</span>(<span class="params">root, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> steps = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> queue = [root]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = queue.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="property">value</span> === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> steps + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    steps++</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      temp.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>(element)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> dfs &amp; bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - Sorting (JavaScript)</title>
      <link href="/posts/a74b63764da0/"/>
      <url>/posts/a74b63764da0/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法-JavaScript"><a href="#排序算法-JavaScript" class="headerlink" title="排序算法 - JavaScript"></a>排序算法 - JavaScript</h1><h2 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1. 选择排序"></a>1. 选择排序</h2><p>核心思想：在未排序的序列中找到最小（大）的元素，存放到排序序列的起始位置，然后再从剩余未排序的元素中继续寻找最小（大）的元素，然后放到已排序序列的末尾，以此类推，直到所有元素排序完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> min = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> N = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    min = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">      min = arr[j] &lt; arr[min] ? j : min</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2. 冒泡排序"></a>2. 冒泡排序</h2><p>核心思想：比较相邻的两个元素，比较完成视情况交换位置，一轮下来，一个元素排序好，依次类推，直到排序完成。</p><ul><li><p>普通版 从前到后对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> N = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">// 1.外层控制循环次数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="comment">// 2.内层控制每个元素比较次数</span></span><br><span class="line">    <span class="comment">// 说明：N-i 外层循环一次表示已经排好一个元素 就不用再比较了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; N - i; j++) &#123;</span><br><span class="line">      <span class="comment">// 自增 &gt;</span></span><br><span class="line">      <span class="comment">// 自减 &lt;</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通版 从后往前比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> N = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = N; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = N; j &gt; N - i; j--) &#123;</span><br><span class="line">      <span class="comment">// 自增 &lt;</span></span><br><span class="line">      <span class="comment">// 自减 &gt;</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">        arr[j - <span class="number">1</span>] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优化版 记录最后一次更改的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> N = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (N &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastChange = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">      <span class="comment">// 自增 &gt;</span></span><br><span class="line">      <span class="comment">// 自减 &lt;</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        arr[j] = arr[j] + arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j] - arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j] = arr[j] - arr[j + <span class="number">1</span>]</span><br><span class="line">        lastChange = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    N = lastChange</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>核心思想：将数据按照一定的顺序一个一个的插入到有序的表中，最终得到序列就是已经排好的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">insertionSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.外层控制循环次数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j = i</span><br><span class="line">    <span class="comment">// 2. 循环条件符合后j的位置的前面都已经排好序了</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>核心思想：从数组中选择一个元素作为基准，将数组中小于基准的元素放到基准的左边，大于基准的元素放到基准的右边，然后再对左右两边的数组重复上述操作，直到数组完全排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> left = []</span><br><span class="line">  <span class="keyword">const</span> right = []</span><br><span class="line">  <span class="keyword">const</span> mid = arr.<span class="title function_">splice</span>((arr.<span class="property">length</span> / <span class="number">2</span> &gt;&gt; <span class="number">0</span>), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = arr[i]</span><br><span class="line">    item &lt;= mid ? left.<span class="title function_">push</span>(item) : right.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), mid, ...<span class="title function_">quickSort</span>(right)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]))</span><br></pre></td></tr></table></figure><h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h2><p>核心思想：将数组分成两部分，分别进行排序，然后将排序好的两部分合并在一起，最终得到的结果就是排序好的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">process</span> = (<span class="params">left, right</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span> &amp;&amp; right.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (right.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mergeSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> midIndex = arr.<span class="property">length</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, midIndex)</span><br><span class="line">  <span class="keyword">const</span> right = arr.<span class="title function_">slice</span>(midIndex)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-希尔排序"><a href="#6-希尔排序" class="headerlink" title="6. 希尔排序"></a>6. 希尔排序</h2><p>核心思想：将数组按照一定的间隔分成几个子数组，然后对子数组进行插入排序，然后缩小间隔，重复上述操作，直到间隔为1，最后对整个数组进行插入排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shell</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = arr[i]</span><br><span class="line">      <span class="keyword">let</span> j = i</span><br><span class="line">      <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; temp) &#123;</span><br><span class="line">        arr[j] = arr[j - gap]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-堆排序"><a href="#7-堆排序" class="headerlink" title="7. 堆排序"></a>7. 堆排序</h2><p>核心思想：将数组构建成一个大根堆，然后将堆顶元素与最后一个元素交换，然后将剩余的元素继续构建成一个大根堆，重复上述操作，直到数组完全排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">heapSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 第一步✅</span></span><br><span class="line">    <span class="title function_">heapInsert</span>(arr, i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> heapSize = arr.<span class="property">length</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二步与第三步✅</span></span><br><span class="line">  <span class="keyword">while</span> (heapSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 交换第一位与最后一位 并且heapSize减1</span></span><br><span class="line">    <span class="title function_">swap</span>(arr, <span class="number">0</span>, --heapSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行heapify 使之保持大根堆 向下调整的过程</span></span><br><span class="line">    <span class="title function_">heapify</span>(arr, <span class="number">0</span>, heapSize)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tmp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上调整的过程</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapInsert</span>(<span class="params">arr, index</span>) &#123;</span><br><span class="line">  <span class="comment">// &gt; 大顶推</span></span><br><span class="line">  <span class="comment">// &lt; 小顶推</span></span><br><span class="line">  <span class="keyword">while</span> (arr[index] &gt; arr[<span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>)]) &#123;</span><br><span class="line">    <span class="title function_">swap</span>(arr, index, <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">    index = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, index, heapSize</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left &lt; heapSize) &#123;</span><br><span class="line">    <span class="keyword">let</span> largest =</span><br><span class="line">      left + <span class="number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left</span><br><span class="line">    largest = arr[index] &gt; arr[largest] ? index : largest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (largest === index) <span class="keyword">break</span></span><br><span class="line">    <span class="title function_">swap</span>(arr, index, largest)</span><br><span class="line">    index = largest</span><br><span class="line">    left = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8. 计数排序"></a>8. 计数排序</h2><p>核心思想：将数组中的元素作为数组的下标，统计每个元素出现的次数，然后将统计好的数组按照下标顺序依次输出，最终得到的结果就是排序好的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">countingSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> maxValue = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)</span><br><span class="line">  <span class="keyword">const</span> bucket = <span class="keyword">new</span> <span class="title class_">Array</span>(maxValue + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> sortedIndex = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> arrLen = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> bucketLen = maxValue + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">      bucket[arr[i]] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    bucket[arr[i]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      arr[sortedIndex++] = j</span><br><span class="line">      bucket[j]--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9. 桶排序"></a>9. 桶排序</h2><p>核心思想：将数组中的元素分到不同的桶中，对每个桶中的元素进行排序，然后再将桶中的元素依次取出，即可得到一个有序的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">bucketSort</span> = (<span class="params">arr, bucketSize</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)</span><br><span class="line">  <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)</span><br><span class="line">  <span class="keyword">const</span> bucketCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>((max - min) / bucketSize) + <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> buckets = <span class="keyword">new</span> <span class="title class_">Array</span>(bucketCount)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">    buckets[i] = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>((arr[i] - min) / bucketSize)</span><br><span class="line">    buckets[index].<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">    <span class="title function_">insertion</span>(buckets[i])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; buckets[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(buckets[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-基数排序"><a href="#10-基数排序" class="headerlink" title="10. 基数排序"></a>10. 基数排序</h2><p>核心思想：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">radixSort</span> = (<span class="params">arr, maxDigit</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mod = <span class="number">10</span></span><br><span class="line">  <span class="keyword">const</span> dev = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> counter = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev)</span><br><span class="line">      <span class="keyword">if</span> (!counter[bucket]) &#123;</span><br><span class="line">        counter[bucket] = []</span><br><span class="line">      &#125;</span><br><span class="line">      counter[bucket].<span class="title function_">push</span>(arr[j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; counter.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (counter[j]) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((value = counter[j].<span class="title function_">shift</span>()) !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          arr[pos++] = value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-二分查找"><a href="#11-二分查找" class="headerlink" title="11. 二分查找"></a>11. 二分查找</h2><p>核心思想：在有序数组中，取中间值与目标值进行比较，如果中间值大于目标值，则在左侧继续查找，如果中间值小于目标值，则在右侧继续查找，如果相等则返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">binarySearch</span> = (<span class="params">arr, target</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> high = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((low + high) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      low = mid + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error Code Collection</title>
      <link href="/posts/6d75cc1c8c2f/"/>
      <url>/posts/6d75cc1c8c2f/</url>
      
        <content type="html"><![CDATA[<h1 id="Error-Code-Collection"><a href="#Error-Code-Collection" class="headerlink" title="Error Code Collection"></a>Error Code Collection</h1><p>错误代码集锦，反面教材，需引以为戒!</p><h2 id="cannot-be-used-as-a-JSX-component"><a href="#cannot-be-used-as-a-JSX-component" class="headerlink" title="cannot be used as a JSX component"></a><code>cannot be used as a JSX component</code></h2><p>代码问题描述：在父组件中引用了一个子组件，并作父子组件之间的一个交互，之前是没有问题的，但在写了比较多的逻辑之后，出现了这个错误，错误信息如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;ChildComp&#x27;</span> cannot be used <span class="keyword">as</span> a <span class="variable constant_">JSX</span> component.</span><br><span class="line">  <span class="title class_">Its</span> <span class="keyword">return</span> <span class="keyword">type</span> <span class="string">&#x27;Element | undefined&#x27;</span> is not a valid <span class="variable constant_">JSX</span> element.</span><br><span class="line">    <span class="title class_">Type</span> <span class="string">&#x27;undefined&#x27;</span> is not assignable to <span class="keyword">type</span> <span class="string">&#x27;Element | null&#x27;</span>.<span class="title function_">ts</span>(<span class="number">2786</span>)</span><br><span class="line">(alias) <span class="keyword">const</span> <span class="title class_">ChildComp</span>: <span class="function">(<span class="params">props: IProps</span>) =&gt;</span> <span class="variable constant_">JSX</span>.<span class="property">Element</span> | <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span></span><br></pre></td></tr></table></figure><p>说的是我的子组件的返回值类型不对，因为作为React的子组件，返回值类型必须是JSX.Element或者是null，但是我子组件中还有可能会返回一个undefined，仔细检查了许久，最后发现是下面这段代码的问题，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addModal = mode === <span class="title class_">ModalType</span>.<span class="property">Add</span></span><br><span class="line"><span class="keyword">const</span> subModal = mode === <span class="title class_">ModalType</span>.<span class="property">Sub</span></span><br><span class="line"><span class="comment">// 编辑或增加下级模式</span></span><br><span class="line"><span class="keyword">if</span> (!addModal &amp;&amp; partFormValues) &#123;</span><br><span class="line">  <span class="keyword">if</span> (subModal) &#123;</span><br><span class="line">    <span class="comment">// 增加下级的时候 父级就是本身</span></span><br><span class="line">    form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">      <span class="attr">superOrg</span>: partFormValues.<span class="property">name</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">    <span class="attr">superOrg</span>: partFormValues.<span class="property">parentName</span>,</span><br><span class="line">    <span class="attr">orgName</span>: partFormValues.<span class="property">name</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码本意是在subModal情况下，设置值之后，<code>return</code>掉，不让下面代码执行，忽略了代码在整个React组件中，所以导致返回值是undefined，在父组件中，就出现了错误，解决之道不适用<code>return</code>结束程序，而是使用else来做判断即可解决，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!addModal &amp;&amp; partFormValues) &#123;</span><br><span class="line">  <span class="keyword">if</span> (subModal) &#123;</span><br><span class="line">    form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">      <span class="attr">superOrg</span>: partFormValues.<span class="property">name</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">  form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">    <span class="attr">superOrg</span>: partFormValues.<span class="property">parentName</span>,</span><br><span class="line">    <span class="attr">orgName</span>: partFormValues.<span class="property">name</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：下次再遇到类似的问题，根据错误提示检查子组件，搜索<code>return</code>相关语句，是否是提交return掉了程序从而导致报错。</p>]]></content>
      
      
      <categories>
          
          <category> Common </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/491816fd7ee8/"/>
      <url>/posts/491816fd7ee8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h2><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h2 id="git别名alias配置"><a href="#git别名alias配置" class="headerlink" title="git别名alias配置"></a>git别名alias配置</h2><p><strong>Windows上配置</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 用户目录下</span><br><span class="line">[alias]</span><br><span class="line">    a = add</span><br><span class="line">    ckt = checkout</span><br><span class="line">    cktb = checkout -b</span><br><span class="line">    cm = commit -m</span><br><span class="line">    ca = commit -a</span><br><span class="line">    ss = status</span><br><span class="line">    pl = pull</span><br><span class="line">    ps = push</span><br><span class="line">    l = log</span><br><span class="line">    br = branch</span><br><span class="line">    reb = rebase</span><br><span class="line">    mg = merge</span><br></pre></td></tr></table></figure><p><strong>Mac上的配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gs=<span class="string">&quot;git status&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gcc=<span class="string">&quot;git checkout&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gccb=<span class="string">&quot;git checkout -b&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">&quot;git log&quot;</span></span><br><span class="line"><span class="built_in">alias</span> glo=<span class="string">&quot;git log --online --graph&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">&quot;git branch&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gba=<span class="string">&quot;git branch -a&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gac=<span class="string">&quot;git add . &amp;&amp; git commit -m&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">&quot;git add .&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gpl=<span class="string">&quot;git pull --rebase&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gpf=<span class="string">&quot;git push --force&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gcl=<span class="string">&quot;git clone&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gp=<span class="string">&quot;git push&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gst=<span class="string">&quot;git stash&quot;</span></span><br><span class="line"><span class="built_in">alias</span> grb=<span class="string">&quot;git rebase&quot;</span></span><br></pre></td></tr></table></figure><h2 id="ssh获取"><a href="#ssh获取" class="headerlink" title="ssh获取"></a>ssh获取</h2><ol><li>ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a> 检测是否配置成功了</li><li>ssh-keygen -C “Your primary GitHub email address” 生成使用</li><li>当你在github上配置正确的时候 再次重复1过程看到下面这句话说明已经成功了。<br>Hi Aspire01! You’ve successfully authenticated, but g<br>does not provide shell access.</li></ol><h2 id="git-代码合并"><a href="#git-代码合并" class="headerlink" title="git 代码合并"></a>git 代码合并</h2><ul><li>merge<ul><li>fast-forward<br>eg. git merge test   当待合并的分支在当前分支的下游时，会发生快速合并 相当于直接移动指针</li><li>no-ff<br>eg. git merge -no-ff test    会在当前合并的分支新建一个提交节点 从而完成合并</li><li>squash 将一个分支中的所有更改压缩成一个提交，并将其合并到另一个分支中。这种方式会创建一个新的合并提交，但只包含一个提交的更改。 svn就采用此种方式   与no-ff 非常相似 区别是不会保留对合如分支的引用<br>eg. 1. master 2. feature 当前处于master分支 通过squash执行合并操作 git merge –squash feature</li></ul></li><li>rebase<br>  这种方式会将一个分支的更改放在另一个分支的顶部，看起来像是它们是按顺序提交的。这种方式不会创建新的合并提交<ul><li>git rebase 在分支合并代码 保持主干为完美线性</li><li>让本地的多个提交合并为一个 简化提交记录<ul><li>git rebase -i HEAD~3</li><li>pick : 代表合并后的提交用这个提交的注释；</li><li>s : squash命令的简写，代表合并提交中包含这个提交；</li><li>d : 代表合并提交中排除这个提交</li></ul></li></ul></li></ul><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p><a href="http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a></p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>stash命令保存当前工作进度，会把暂存区和工作区的改动保存起来</p><p><strong>常用命令：</strong></p><ul><li>git stash：保存当前改动</li><li>git stash save ‘xxx’: 可以用于存储修改 并且将git的工作状态切回到上次的一次合法提交上 xxx为备注信息</li><li>git stash list：显示保存进度的列表</li><li>git stash pop：栈顶的内容会恢复到工作区 也可指定哪个名字</li><li>git stash show：查看堆栈中最新保存的stash和当前目录的差异</li><li>git stash drop：加上名称则是可以移除某个指定的stash</li><li>git stash clear：删除所有的存储的进度</li></ul><p><strong>应用场景：</strong></p><ol><li><p>当你的开发进行到一半,但是代码还不想进行提交 ,然后需要同步去关联远端代码时.如果你本地的代码和远端代码没有冲突时,可以直接通过git pull解决，否则使用如下<br>git stash<br>git pull<br>git stash pop</p></li><li><p>或者当你开发到一半，现在要修改别的分支问题的时候，你也可以使用git stash缓存        当前区域的代码<br>git stash：保存开发到一半的代码<br>git commit -m ‘修改问题’<br>git stash pop：将代码追加到最新的提交之后</p></li></ol><p><strong>意外drop stash 如何找回：</strong></p><ol><li>git log –graph –oneline –decorate  $( git fsck –no-reflog | awk ‘/dangling commit/ {print $3}’ )</li><li>恢复特定stash  git stash apply stashId</li></ol><p>参考：<a href="https://mp.weixin.qq.com/s/62YQORpsGCmKV4ydE2yTFw">https://mp.weixin.qq.com/s/62YQORpsGCmKV4ydE2yTFw</a></p><h2 id="git-tag？"><a href="#git-tag？" class="headerlink" title="git tag？"></a>git tag？</h2><p><strong>常用命令：</strong></p><ul><li>git tag  — 查看所有标签</li><li>git tag -a v1.0 -m “版本1.0”  — 创建带注释的标签</li><li>git tag -d v1.0 — 删除标签</li><li>git push origin –tags — 推送标签到远程仓库</li><li>git push origin –delete tag v1.0 — 删除远程标签</li><li>git show v1.0 — 查看标签信息</li></ul><h2 id="git其他操作命令"><a href="#git其他操作命令" class="headerlink" title="git其他操作命令"></a>git其他操作命令</h2><p><strong>git常用命令</strong></p><ul><li><p>git init — 初始化一个git仓库</p></li><li><p>git config –system –unset credential.helper</p></li><li><p>git clone 地址 — 可以在github上下载项目</p></li><li><p>git clone -b feature git地址 — 拉取仓库的特定分支</p></li><li><p>git branch ** — 创建分支</p></li><li><p>git branch -m ‘xxxx’ — 修改分支名称</p></li><li><p>git checkout **  —切换分支</p></li><li><p>git branch -d  dev(测试分支)   —删除本地分支  远程删除了分支 本地仍然存在 git pull操作了也不行</p></li><li><p>git push origin –delete dev     —删除远程分支</p></li><li><p>git checkout -b feature-branch origin/feature-branch — 检出远程的feature-branch分支到本地</p></li><li><p>git branch –set-upstream-to=origin/dev — dev为本地的分支</p></li><li><p>git add test.java —这是将工作区的文件添加到暂存区中</p></li><li><p>git commit -m ‘描述’ — 这是将暂存区的文件提交到本地仓库中</p></li><li><p>git commit –amend -m “新的修改提交信息” — 修改最后一次提交的信息</p></li><li><p>git remote add origin xxx  —添加远程仓库地址 只能添加一个</p></li><li><p>git remote rm origin — 移除远程仓库地址</p></li><li><p>git push — 本地文件同步到远程仓库</p></li><li><p>git clean -d -fx   — 清除没有添加到工作区的文件</p></li><li><p>git reset –hard HEAD^ — 代码回滚到上个版本</p></li><li><p>git reset –hard versionId（版本id 可在仓库中查看到）</p></li><li><p>git reset –soft versionId 与–hard不同的是，hard会丢失versionId后的提交代码，–soft则会将代码放到暂存区</p></li><li><p>git reset –hard origin/master — 代码回到指定的某个版本</p></li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="git迁移并保留历史提交记录？"><a href="#git迁移并保留历史提交记录？" class="headerlink" title="git迁移并保留历史提交记录？"></a>git迁移并保留历史提交记录？</h3><ol><li>git remote -v 查看远程仓库情况</li><li>git remote add xxx(origin-name) xxx(新的远程仓库地址)</li><li>git push xxx(origin-name) –all –force 同步所有老仓库的分支信息给新仓库 第一次可以直接使用–force</li><li>补充：git push xxx(origin-name) dev:develop 提交老仓库的dev分支信息到新仓库的develop分支</li></ol><h3 id="本地分支和远端分支不一样的情况？"><a href="#本地分支和远端分支不一样的情况？" class="headerlink" title="本地分支和远端分支不一样的情况？"></a>本地分支和远端分支不一样的情况？</h3><ul><li>git remote update origin –prune</li></ul><h3 id="当在-gitignore中添加忽略文件的时候，却发现不起效果怎么办？"><a href="#当在-gitignore中添加忽略文件的时候，却发现不起效果怎么办？" class="headerlink" title="当在.gitignore中添加忽略文件的时候，却发现不起效果怎么办？"></a>当在.gitignore中添加忽略文件的时候，却发现不起效果怎么办？</h3><ul><li>当存在添加却不起效果的时候，很有可能当前文件或者文件夹内容已被git管理，而忽略中只能忽略未被添加到git管理的文件</li><li>git rm -r –cached .swc（eg.） 执行此命令，删除当前文件可解决</li></ul><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ul><li><p>Git报错之-refusing to merge unrelated histories？<br><a href="https://blog.csdn.net/u012145252/article/details/80628451">https://blog.csdn.net/u012145252/article/details/80628451</a></p></li><li><p>Git报错之-you are not allowed to push code to protected branches on this project？<br><a href="https://blog.csdn.net/zzh920625/article/details/78087669">https://blog.csdn.net/zzh920625/article/details/78087669</a></p></li><li><p>ssh: connect to host github.com port 22: Connection timed out<br>解决方案<br><a href="https://blog.csdn.net/hdm314/article/details/119947761">https://blog.csdn.net/hdm314/article/details/119947761</a></p></li><li><p>fatal: unable to access ‘<a href="https://github.com/.../.git&#39;">https://github.com/.../.git&#39;</a>: Could not resolve host: github.com<br>解决方案：<br>git config –global –unset http.proxy<br>git config –global –unset https.proxy</p></li><li><p>fatal: Authentication failed for ‘<a href="https://git.weixin.qq.com/wx_wxde49dccaca3d346d/zsh.git/">https://git.weixin.qq.com/wx_wxde49dccaca3d346d/zsh.git/</a> ？<br>描述：从dev分支拉出本地分支release后，想要将release推送到远程分支，出现了上面的提示。<br>解决方案：<br>输入 git config –system –unset credential.helper 命令之后，出现以下错误<br>error: could not lock config file C:/Program Files/Git/etc/gitconfig: Permission denied<br>然后找到此C:/Program Files/Git/etc文件夹，给与所有权限之后，重新执行以上命令，成功。<br>之后 git config –global user.name “xxx”<br>git config –global user.email “xxx”<br>成功解决问题。</p></li><li><p>git遇到冲突时打开文件不显示Accept current change等选项？<br><a href="https://blog.csdn.net/qq_36279445/article/details/126603336">https://blog.csdn.net/qq_36279445/article/details/126603336</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目纪实杂症之process is not defined</title>
      <link href="/posts/e9bf7ab36816/"/>
      <url>/posts/e9bf7ab36816/</url>
      
        <content type="html"><![CDATA[<h1 id="项目纪实杂症之process-is-not-defined"><a href="#项目纪实杂症之process-is-not-defined" class="headerlink" title="项目纪实杂症之process is not defined"></a>项目纪实杂症之<code>process is not defined</code></h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>项目使用的Vite构建React前端项目，符号现代化web开发规范，部署到云端通过新建流水线后实现自动部署。通常情况是本地修改之后之后上传release分支，运行流水线，部署完成(uat)。终于有一天，按照常规操作之后，再次访问项目，意外出现白屏无法问题。开始排查…</p><h2 id="排查流程"><a href="#排查流程" class="headerlink" title="排查流程"></a>排查流程</h2><h3 id="从最直观的错误出发"><a href="#从最直观的错误出发" class="headerlink" title="从最直观的错误出发"></a>从最直观的错误出发</h3><ol><li><p>登录成功之后进入首页，页面空白，打开开发控制台，控制台明显报错，见下图<br><a href="http://3.83.142.223/imgs/01.png">err01.png</a><br><a href="http://3.83.142.223/imgs/02.png">err02.png</a></p></li><li><p>从错误信息可以直观判断出，源码中使用了<code>process</code>,但是没定义，<code>process</code>是node环境下的定义的，如果说在浏览器端直接使用的话，是会出这样的问题，于是找到本地代码，查找<code>process</code>的使用地方，排除了node_modules第三库之外，只有一处使用了<code>process.cwd()</code>，和错误处相距甚远，显然不是这个这里导致的。</p></li><li><p>项目代码没问题，那究竟是哪里出来问题？同样的代码，之前构建跑的流水线能够使用，今天却突然不行了，极大的可能是流水线哪里出了问题，于是…</p></li></ol><h3 id="排查前后流水线的差别"><a href="#排查前后流水线的差别" class="headerlink" title="排查前后流水线的差别"></a>排查前后流水线的差别</h3><p>经过前后对比前后2条流水线的对比之后发现，出问题的这条流水线的部分包的依赖版本更高，像<code>esbuild</code> <code>rollup</code>等，刚好这些是<code>vite</code>的依赖，竟然是<code>vite</code>来进行打包，那么合理的猜想便是这些包的版本高了导致的问题，查看vite包依赖如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;esbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.17.5&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.4.21&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.22.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.18.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里需要了解的第一个知识点，包版本范围的控制的控制</p><ul><li><code>^</code>符号表示可以安装指定包的最新版本，但是版本号的第一位不能变。例如，”^1.2.3”表示可以安装1.2.x系列中最新的版本，但不能安装1.3.0及以上版本</li><li><code>~</code>符号表示可以安装指定包的最新版本，但是版本号的前两位不能变。例如，”~1.2.3”表示可以安装1.2.x系列中最新的版本，但不能安装1.3.x及以上版本</li><li><code>&gt;</code>：表示可以安装指定包的最新版本，但是必须大于指定的版本号。</li><li><code>&gt;=</code>：表示可以安装指定包的最新版本，但是必须大于等于指定的版本号。</li><li><code>&lt;</code>：表示可以安装指定包的最新版本，但是必须小于指定的版本号。</li><li><code>&lt;=</code>：表示可以安装指定包的最新版本，但是必须小于等于指定的版本号。</li><li><code>=</code>：表示只能安装指定的版本号。</li><li><code>-</code>：表示可以安装指定范围内的任意版本。例如，”1.2.3 - 1.2.5”表示可以安装1.2.3、1.2.4和1.2.5这三个版本</li></ul><p>由上再结合npm官网<code>esbuild</code>包的更新，发现正好esbuild前两天更新了，那么此时拉到最新版本0.17.18符合预期，考虑到可能是包更新导致的问题，想办法只安装<code>esbuild</code>版本为0.17.17，好的流水线真是0.17.17版本，作了以下尝试：</p><p>在项目的devDependencies中的vite下面添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.1&quot;</span></span><br><span class="line"><span class="attr">&quot;esbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.17.17&quot;</span></span><br></pre></td></tr></table></figure><p>发现这种情况并不能阻止安装最新的<code>esbuild</code>为0.17.18, a few minutes later, 来到了第二个知识点，当想要固定项目中依赖的依赖时，<code>package.json</code>中添加字段如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;resolutions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;esbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.17.17&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>修改完成，构建部署，打开页面，同样的错误,就说不会这么简单~ 继续对比，发现rollup的版本也和esbuild是一样的情况，那么也尝试固定一下rollup的版本呢，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;resolutions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;esbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.17.17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.20.6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>结论出来了，看了仅仅改变包依赖的问题还是不能解决，只能另想它法了。这个<code>process</code>到底是哪里使用，于是又有了新的思路！</p><h3 id="寻找process使用源头"><a href="#寻找process使用源头" class="headerlink" title="寻找process使用源头"></a>寻找process使用源头</h3><p>由于线上是生产打包文件，打包的文件，不是很好确定！考虑本地来复现问题，首先移除node_modules，拉取最新的包依赖和线上保持一致，完事之后，运行yarn dev，打开访问地址，登录，进入首页，空白！！Ops, 复现，打开控制台，便很容易得到以下截图<br><a href="http://3.83.142.223/imgs/03.png">err03.png</a></p><p>终于，罪魁祸首引用的地方找到了，原来是<code>@ant-design/pro-components</code>包中引用报错，看看npm官网，这个包最近也是有所更新，那么到底是这个包升级导致的问题与否，问了官方的人员没给我答复。我暂且不追究了，搜索得知，vite在本地开启服务的时候是可以通过<code>define</code>字段来定义，于是在<code>vite.config.ts</code>中添加字段定义</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">define</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;process.env&#x27;</span>: &#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次<code>yarn dev</code>，可以！ 搞定了，折腾得已经够久了，然后愉快打个包，线上仍然是同样的问题 …</p><p>经过一番思索，上面那个配置应该是在<code>vite</code>开发环境下编译注入,打包之后便失去了效果，那么如果有能对于打包的配置，在输出的时候注入不就可以了~ 果然还是有这样的答案，文章是针对<code>rollup</code>配置，刚好<code>vite</code>也是<code>rollup</code>来进行打包，这下刚刚好，参考文章之后添加如下配置</p><p><code>vite.config.ts</code>中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略了不必要的代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(mode) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Global</span> = <span class="string">`var process = &#123;</span></span><br><span class="line"><span class="string">   env: &#123;&#125;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">        <span class="attr">banner</span>: <span class="title class_">Global</span>, <span class="comment">// 如此之后在打包输出文件添加了process变量</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经过以上的配置，打包，访问，首页出现，完美收工！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>出现这个问题自是包依赖版本拉取到最新的问题，但具体是哪个环节出了问题，没有定论。</p><p><strong>需要掌握的几个知识点：</strong></p><ul><li><code>package.json</code>包依赖的版本范围控制</li><li>项目依赖项中子依赖的版本控制</li><li>构建工具<code>vite</code>有了更高的体会，使用<code>import.meta.env</code>而非<code>process.env</code>来控制环境变量等</li></ul>]]></content>
      
      
      <categories>
          
          <category> experience-sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> investigating-complex-issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/posts/9bf926d88050/"/>
      <url>/posts/9bf926d88050/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux-Commends"><a href="#Linux-Commends" class="headerlink" title="Linux Commends"></a>Linux Commends</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>  -- 展开目录 </span><br><span class="line"><span class="built_in">ls</span> -a -- 包括隐藏文件</span><br><span class="line"><span class="built_in">ls</span> /usr -- 针对根目录查看当前usr下文件目录</span><br><span class="line">ll -- 展开目录并显示文件等的信息</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> / -- 回到根目录</span><br><span class="line"><span class="built_in">cd</span> 或 <span class="built_in">cd</span> ~ -- 用户目录 /root  =&gt; 系统管理员 超级权限者的用户主目录</span><br><span class="line"></span><br><span class="line">clear -- 清屏</span><br><span class="line">ctrl+l -- 同上</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> folder =&gt; 创建文件夹 单个</span><br><span class="line"><span class="built_in">mkdir</span> -p sh/folder  多层目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> file.js =&gt; 创建文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f  -- 删除文件</span><br><span class="line"><span class="built_in">rm</span> -rf -- 遍历强制删除任何文件 *包括空文件夹</span><br><span class="line"><span class="built_in">pwd</span> -- 显示当前目录</span><br><span class="line"></span><br><span class="line">vim file.js -- 编辑文件 (没有会自创建)</span><br><span class="line">vi  file.js -- 基本同上</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> file.js -- 查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> -- 将文件或目录改名或将文件由一个目录移入另一个目录中</span><br><span class="line"><span class="built_in">cp</span> -- 用于复制文件或目录的指令</span><br></pre></td></tr></table></figure><h2 id="Vim操作相关"><a href="#Vim操作相关" class="headerlink" title="Vim操作相关"></a>Vim操作相关</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:w - 保存文件，不退出vim。</span><br><span class="line">:w file - 将修改另外保存到file中，不退出vim。</span><br><span class="line">:w! - 强制保存，不退出vim 。</span><br><span class="line">:wq - 保存文件，退出vim。</span><br><span class="line">:wq! - 强制保存文件，退出vim。</span><br><span class="line">:q - 不保存文件，退出vim。</span><br><span class="line">:q! - 不保存文件，强制退出vim。</span><br><span class="line">:e! - 放弃所有修改，从上次保存文件开始再编辑。</span><br></pre></td></tr></table></figure><h2 id="Linux添加环境变量？"><a href="#Linux添加环境变量？" class="headerlink" title="Linux添加环境变量？"></a>Linux添加环境变量？</h2><p><strong>以宝塔安装的nodejs为例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.直接在命令行下执行 （这种情况下次登录sh需要重新设置，不建议）</span></span><br><span class="line"><span class="comment"># node -v 检测是否ok</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/www/server/nodejs/v16.15.1/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 在/etc/profile.d/ 创建sh来设置 (*推荐使用)</span></span><br><span class="line">https://blog.csdn.net/weixin_43277055/article/details/125037546</span><br><span class="line"></span><br><span class="line">- vim /etc/profile.d/example.sh 编辑环境变量即可</span><br><span class="line">- <span class="built_in">source</span> /etc/profile 立即生效</span><br><span class="line">- <span class="built_in">echo</span> <span class="variable">$EXAMPLE</span> 查看变量是否生效</span><br></pre></td></tr></table></figure><h2 id="Linux上运行Spring-boot项目（java）"><a href="#Linux上运行Spring-boot项目（java）" class="headerlink" title="Linux上运行Spring-boot项目（java）?"></a>Linux上运行Spring-boot项目（java）?</h2><ul><li>控制台启动模式 霸屏模式 关闭此窗口 项目就会关闭 java -jar xxx.jar</li><li>后台启动  nohup java -jar xxx.jar</li></ul><h2 id="CronTab开启定时任务执行脚本？"><a href="#CronTab开启定时任务执行脚本？" class="headerlink" title="CronTab开启定时任务执行脚本？"></a>CronTab开启定时任务执行脚本？</h2><p><strong>crontab命令</strong></p><ul><li>crontab -l  //查看定时任务列表</li><li>crontab -e  //编辑定时任务</li><li>/sbin/service crond start //启动服务</li><li>/sbin/service crond stop //关闭服务</li><li>/sbin/service crond restart //重启服务</li><li>/sbin/service crond reload //重新载入配置</li><li>/sbin/service crond status //查看当前服务状态</li><li>tail -n 30 /var/log/cron  // 查看crontab日志 当设置了没有生效的情况 这很有用</li></ul><p><strong>实现步骤</strong></p><ul><li>定义执行的脚本  ~/scripts/signIn/app.js 比如实现签到功能之类的<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定时执行脚本</span></span><br><span class="line">/www/server/nodejs/v16.15.1/bin/node   ~/scripts/signIn/app.js           </span><br></pre></td></tr></table></figure></li><li>crontab -e 添加定时任务</li><li>查看crontab的启动状态是否ok<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入编辑任务模式</span></span><br><span class="line">crontab -e </span><br><span class="line">0 0 * * * ~/sh/sign.sh</span><br></pre></td></tr></table></figure></li></ul><p><strong>案例</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 每天23点50后执行脚本 已经更改为计划任务</span><br><span class="line">50 23  * * * /www/server/nodejs/v16.15.1/bin/node   ~/scripts/signin/exchange_miles.js</span><br><span class="line">30 0 * * *  /www/server/cron/24a02090260af168a1b46ab780c6ab03 &gt;&gt; /www/server/cron/24a02090260af168a1b46ab780c6ab03.log 2&gt;&amp;1</span><br><span class="line">0 9 * * *  /www/server/cron/143b83a532fd43e907241418cb2fabe4 &gt;&gt; /www/server/cron/143b83a532fd43e907241418cb2fabe4.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="Linux服务器重启、关机操作"><a href="#Linux服务器重启、关机操作" class="headerlink" title="Linux服务器重启、关机操作"></a>Linux服务器重启、关机操作</h2><ul><li><a href="https://m.php.cn/article/417358.html">https://m.php.cn/article/417358.html</a></li></ul><h2 id="Linux系统防火墙"><a href="#Linux系统防火墙" class="headerlink" title="Linux系统防火墙"></a>Linux系统防火墙</h2><ul><li><a href="https://blog.csdn.net/y995zq/article/details/123329572">https://blog.csdn.net/y995zq/article/details/123329572</a></li><li>给某个端口让行，注意结合安全组<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让在安全组配置中的端口可以访问</span></span><br><span class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8087 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ul><h2 id="网络端口状况"><a href="#网络端口状况" class="headerlink" title="网络端口状况"></a>网络端口状况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看tcp端口是否被占用</span></span><br><span class="line">netstat -nultp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤选择查看某个端口</span></span><br><span class="line">netstat -anp | grep 8000</span><br></pre></td></tr></table></figure><h2 id="进程状况"><a href="#进程状况" class="headerlink" title="进程状况"></a>进程状况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有进程</span></span><br><span class="line">ps -ef 或者 ps uat -- 区别在于展示风格不同</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤查看mysql进程</span></span><br><span class="line">ps -ef | grep process(eg.mysql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个进程的pid</span></span><br><span class="line">pgrep process(eg.mysql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉某个进程</span></span><br><span class="line"><span class="built_in">kill</span> -s 9 pid(eg.12485)</span><br></pre></td></tr></table></figure><h2 id="Yum操作"><a href="#Yum操作" class="headerlink" title="Yum操作"></a>Yum操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y package(eg.ngnix)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除单个或者多个</span></span><br><span class="line">yum remove wget unzip -y</span><br></pre></td></tr></table></figure><h2 id="压缩解压文件"><a href="#压缩解压文件" class="headerlink" title="压缩解压文件"></a>压缩解压文件</h2><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">zip -r demo.zip demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压xxx.zip 到当前目录</span></span><br><span class="line">unzip xxx.zip -d . </span><br></pre></td></tr></table></figure><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar zcvf demo.tar.gz demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf demo.tar</span><br><span class="line">tar -xvf demo.tar.gz</span><br></pre></td></tr></table></figure><h2 id="链接远程服务器"><a href="#链接远程服务器" class="headerlink" title="链接远程服务器"></a>链接远程服务器</h2><ol><li>Mac<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@119.23.208.xx </span><br></pre></td></tr></table></figure></li></ol><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ol><li><p>安装<code>lrzsz</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install lrzsz -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">rpm -qa | grep lrzsz</span><br></pre></td></tr></table></figure></li><li><p>上传</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><ol start="3"><li>下载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz xxx</span><br></pre></td></tr></table></figure><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><ol><li><p>上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于本地终端操作 默认上传到目录为用户目录 如下：我用户目录存在<span class="built_in">test</span>文件夹</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件</span></span><br><span class="line">scp  docker.md root@119.23.208.253:./test/docker.md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件夹 xxx为某个文件夹</span></span><br><span class="line">scp -r xxx root@119.23.208.253:./</span><br></pre></td></tr></table></figure></li><li><p>下载</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于本地终端</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载文件</span></span><br><span class="line">scp root@119.23.208.253:/root/docker.md .</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载文件夹<span class="built_in">test</span></span></span><br><span class="line">scp -r root@119.23.208.253:/root/test .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise原理实现</title>
      <link href="/posts/4812bbe50f73/"/>
      <url>/posts/4812bbe50f73/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise原理手写实现"><a href="#Promise原理手写实现" class="headerlink" title="Promise原理手写实现"></a>Promise原理手写实现</h1><h2 id="已实现方法"><a href="#已实现方法" class="headerlink" title="已实现方法"></a>已实现方法</h2><ul><li>p.then()</li><li>p.catch()</li><li>Promise.all()</li><li>Promise.race()</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>Talk is cheap, show me the code!</p><h3 id="new-Promise"><a href="#new-Promise" class="headerlink" title="new Promise()"></a>new Promise()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">resolvedValue</span> = <span class="literal">null</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">rejectedValue</span> = <span class="literal">null</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFullFilledList</span> = [] </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedList</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span>  _this = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      _this.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">      _this.<span class="property">resolvedValue</span> = value</span><br><span class="line"></span><br><span class="line">      _this.<span class="property">onFullFilledList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      _this.<span class="property">status</span> = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">      _this.<span class="property">rejectedValue</span> = value</span><br><span class="line"></span><br><span class="line">      _this.<span class="property">onRejectedList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * Then方法实现</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">// * 入参处理</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isFunction</span>(onFulfilled)) onFulfilled = <span class="function">(<span class="params">value</span>) =&gt;</span> value</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isFunction</span>(onRejected))  onRejected = <span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="keyword">throw</span> reason</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// * Note: Then method simple implementation</span></span><br><span class="line">  <span class="comment">// if (this.status === &#x27;fulfilled&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//   onFulfilled(this.resolvedValue)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// if (this.status === &#x27;reject&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//   onRejected(this.rejectedValue)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 这里处理当resolve或reject为异步调用的情况</span></span><br><span class="line">  <span class="comment">// // 所以我们此时应该把当前传递的函数保存到一个数组 在真正resolve或reject的时候调用这些函数</span></span><br><span class="line">  <span class="comment">// if (this.status === &#x27;pending&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//   this.onFullFilledList.push(onFulfilled)</span></span><br><span class="line">  <span class="comment">//   this.onRejectedList.push(onRejected)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// * Note: Simple implementation done.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// * Note: Then method standard implementation</span></span><br><span class="line">  <span class="comment">// then方法要支持链式调用 需返回一个promise实例</span></span><br><span class="line">  <span class="comment">// 分析：</span></span><br><span class="line">  <span class="comment">//  1. 要支持then的链式调用 考虑前一个then的中的处理结果</span></span><br><span class="line">  <span class="comment">//  1.1 .then((data) =&gt; console.log(data)) 返回结果undefined</span></span><br><span class="line">  <span class="comment">//  1.2 返回结果可能是任意值 分情况判断</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">taskOfFulfilled</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">const</span> prevResult = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">resolvedValue</span>)</span><br><span class="line">          <span class="title function_">handlePromise</span>(promise2, prevResult, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">taskOfRejected</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取失败回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">const</span> prevResult = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">rejectedValue</span>)</span><br><span class="line">          <span class="title function_">handlePromise</span>(promise2, prevResult, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// promise2未初始化就使用 报错：Cannot access &#x27;promise2&#x27; before initialization</span></span><br><span class="line">      <span class="comment">// prevResult存在几种情况</span></span><br><span class="line">      <span class="comment">// const prevResult = onFulfilled(this.resolvedValue)</span></span><br><span class="line">      <span class="comment">// handlePromise(promise2, prevResult, resolve, reject)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// * 针对上述报错修改</span></span><br><span class="line">      <span class="comment">// 创建一个微任务等待promise2完成初始化</span></span><br><span class="line">      <span class="comment">// @see：https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask</span></span><br><span class="line">      <span class="title function_">taskOfFulfilled</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;reject&#x27;</span>) <span class="title function_">taskOfRejected</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFullFilledList</span>.<span class="title function_">push</span>(taskOfFulfilled)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedList</span>.<span class="title function_">push</span>(taskOfRejected)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line">  <span class="comment">// * Note: Then method normal implementation done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handlePromise"><a href="#handlePromise" class="headerlink" title="handlePromise()"></a>handlePromise()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handlePromise</span>(<span class="params">promise2, prevResult, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// then 方法返回的是自己的 Promise 对象，则会发生循环调用，这个时候程序会报错</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === prevResult) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> prevResult === <span class="string">&#x27;object&#x27;</span> &amp;&amp; prevResult !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> then = prevResult?.<span class="property">then</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// called 变量主要是用来判断如果 handlePromise 函数已经 resolve 或者 reject了，那就不需要在执行下面的 resolve 或者 reject</span></span><br><span class="line">        <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// call方法 foo.call(object，arg1, arg2, ...) 成功或失败的回调函数作为参数传入</span></span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          prevResult, <span class="comment">// this指向问题</span></span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 递归 直到值不再是promise</span></span><br><span class="line">            <span class="title function_">handlePromise</span>(promise2, res, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(prevResult)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通值处理</span></span><br><span class="line">    <span class="title function_">resolve</span>(prevResult)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * Promise.all方法实现</span></span><br><span class="line"><span class="comment">// 传入一个数组 且都是promise实例</span></span><br><span class="line"><span class="comment">// 返回一个promise then中的内容分别是数组promises中promise之后的结果</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!promises || !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) <span class="keyword">return</span> <span class="title function_">reject</span>()</span><br><span class="line">    <span class="keyword">const</span> len = promises.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">process</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(data)</span><br><span class="line">      <span class="keyword">if</span> (len === result.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> promise <span class="keyword">of</span> promises) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isPromise</span>(promise)) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">process</span>(data)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 非promise的情况 原样返回</span></span><br><span class="line">        <span class="title function_">process</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * Promise.race方法实现 竞速</span></span><br><span class="line"><span class="comment">// 传入一个数组 且都是promise实例</span></span><br><span class="line"><span class="comment">// 返回一个promise 哪个实例先resolve就返回</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!promises || !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) <span class="keyword">return</span> <span class="title function_">reject</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> promise <span class="keyword">of</span> promises) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isPromise</span>(promise)) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Utils-工具函数"><a href="#Utils-工具函数" class="headerlink" title="Utils-工具函数"></a>Utils-工具函数</h3><h4 id="isFunction"><a href="#isFunction" class="headerlink" title="isFunction()"></a>isFunction()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">o</span>)  &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isPromise"><a href="#isPromise" class="headerlink" title="isPromise()"></a>isPromise()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPromise</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> promise === <span class="string">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class="line">    promise !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> promise.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Test-Cases"><a href="#Test-Cases" class="headerlink" title="Test Cases"></a>Test Cases</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * 说明：下面示例主要考虑resolve的情况 reject同理</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Test2: resolve异步调用的情况</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="comment">// reject(&#x27;This a test of reject&#x27;)</span></span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Test1： resolve直接同步调用</span></span><br><span class="line">  <span class="comment">// resolve(100)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法返回自己的promise时报错 Chaining cycle detected for promise #&lt;Promise&gt;</span></span><br><span class="line"><span class="comment">// const p1 = p.then(resolve =&gt; p1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// * Test1</span></span><br><span class="line"><span class="comment">// Done. 2s之后输出 data: 100</span></span><br><span class="line"><span class="comment">// p.then(</span></span><br><span class="line"><span class="comment">//   (data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;data:&#x27;, data)</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   (err) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;err:&#x27;, err)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * Test2 多次调用then方法</span></span><br><span class="line"><span class="comment">// Done. 2s之后输出2次 data: 100</span></span><br><span class="line"><span class="comment">// p.then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;data:&#x27;, data)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p.then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;data:&#x27;, data)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * Test3 then的链式调用</span></span><br><span class="line"><span class="comment">// Done. 2s之后输出2次 data: 100  data: undefined</span></span><br><span class="line"><span class="comment">// p.then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;data:&#x27;, data)</span></span><br><span class="line"><span class="comment">// &#125;).then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;data:&#x27;, data)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? 问题</span></span><br><span class="line"><span class="comment">// 1. 当new Promise中直接同步调用resolve时 可以拿到值，但如果存在异步，此时调用then方法中 status处于pending状态</span></span><br><span class="line"><span class="comment">// 2. then链式调用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript常用内置工具类型（ts-built-in-utils）</title>
      <link href="/posts/c93c9de5fd14/"/>
      <url>/posts/c93c9de5fd14/</url>
      
        <content type="html"><![CDATA[<h1 id="Typescript常用内置工具类型"><a href="#Typescript常用内置工具类型" class="headerlink" title="Typescript常用内置工具类型"></a>Typescript常用内置工具类型</h1><h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><p>定义对象的key与value类型</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Record</span>&lt;key type, value type&gt; </span><br></pre></td></tr></table></figure><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><p>生成新类型，该类型与T拥有相同的属性，所有属性变为可选</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h2><p>生成一个新类型，该类型与T拥有相同的属性，但所有属性皆为必选项</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">    [p <span class="keyword">in</span> keyof T]-?: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><p>生成一个新类型，T中所有属性变为只读，不能修改</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p>生成一个新类型，返回T包含了K的属性集</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h2><p>如果T是U的子类型则返回never不是则返回T</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type A = number | string | boolean</span><br><span class="line">type B = number | boolean</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Foo</span> = <span class="title class_">Exclude</span>&lt;A, B&gt;</span><br><span class="line"><span class="comment">// equals</span></span><br><span class="line">type <span class="title class_">Foo</span> = string</span><br></pre></td></tr></table></figure><h2 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h2><p>与Exclude相反</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : never</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type A = number | string | boolean</span><br><span class="line">type B = number | boolean</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Foo</span> = <span class="title class_">Extract</span>&lt;A, B&gt;</span><br><span class="line"><span class="comment">// equals</span></span><br><span class="line">type <span class="title class_">Foo</span> = number | boolean</span><br></pre></td></tr></table></figure><h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h2><p>生成一个新类型，该类型拥有T中除了K属性意外的所有属性</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> keyof any&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt; </span><br></pre></td></tr></table></figure><h2 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable</h2><p>从泛型T中排除掉null和undefined</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">NonNullable</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? never : T;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type A = string | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">type B = <span class="title class_">NonNullable</span>&lt;A&gt;</span><br><span class="line"><span class="comment">// equals</span></span><br><span class="line">type B = string</span><br></pre></td></tr></table></figure><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>以元组的方式获得函数的入参类型</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Parameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Parameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer P) =&gt; any ? P : never;</span><br><span class="line">type t = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">name: string</span>) =&gt;</span> any&gt;; <span class="comment">// type t = [string]</span></span><br><span class="line">type t2 = <span class="title class_">Parameters</span>&lt;(<span class="function">(<span class="params">name: string</span>) =&gt;</span> any)  | (<span class="function">(<span class="params">age: number</span>) =&gt;</span> any)&gt;; <span class="comment">// type t2 = [string] | [number]</span></span><br></pre></td></tr></table></figure><h2 id="ConstructorParameters"><a href="#ConstructorParameters" class="headerlink" title="ConstructorParameters"></a>ConstructorParameters</h2><p>以元组的方式获得构造函数的入参类型</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; any&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">ConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: infer P) =&gt; any ? P : never;</span><br><span class="line"> </span><br><span class="line">type t = <span class="title class_">ConstructorParameters</span>&lt;(<span class="keyword">new</span> (<span class="attr">name</span>: string) =&gt; any)  | (<span class="keyword">new</span> (<span class="attr">age</span>: number) =&gt; any)&gt;;</span><br><span class="line"><span class="comment">// type t = [string] | [number]</span></span><br></pre></td></tr></table></figure><h2 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType</h2><p>获得函数返回的类型</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; infer R ? R : any;</span><br><span class="line"> </span><br><span class="line">type t = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params">name: string</span>) =&gt;</span> string | number&gt;</span><br><span class="line"><span class="comment">// type t = string | number</span></span><br></pre></td></tr></table></figure><h2 id="InstanceType"><a href="#InstanceType" class="headerlink" title="InstanceType"></a>InstanceType</h2><p>获得构造函数返回值的类型</p><p><strong>源码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; any&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; infer R ? R : any;</span><br><span class="line">type t = <span class="title class_">InstanceType</span>&lt;<span class="keyword">new</span> (<span class="attr">name</span>: string) =&gt; &#123;<span class="attr">name</span>: string, <span class="attr">age</span>: number&#125;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript Tsconfig</title>
      <link href="/posts/aafbbb1bf9ce/"/>
      <url>/posts/aafbbb1bf9ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Typescript中tsconfig-json配置速查"><a href="#Typescript中tsconfig-json配置速查" class="headerlink" title="Typescript中tsconfig.json配置速查"></a>Typescript中tsconfig.json配置速查</h1><p>tsconfig.json属性配置，定义typescript将以什么样的方式去编译代码，熟悉常用配置选项，对日常开发将会有一定帮助，即使忘记速查即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 包含： /** 任何目录 /* 任何文件 默认值：/**/*</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 排除： 默认排除node_modules browser_components jspm_packages 一般情况下不需要配置</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 用来指定ts被编译后的es版本 默认es3 ESNext指代最新的es版本</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 执行项目中要使用库 一般不用 浏览器环境不用管</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [&quot;dom&quot;], // 比如dom =&gt; document</span></span><br><span class="line">    <span class="comment">// 编译后的文件路径</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 全局作用域中的代码合并放到一起 如果要合并模块 module应该设置amd或者system规范</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span></span><br><span class="line">    <span class="comment">// 移除注释</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* Modules */</span></span><br><span class="line">    <span class="comment">// 指定要使用的模块化规范 js有很多模块化的解决方案</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span> <span class="comment">// 推荐</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JavaScript Support */</span></span><br><span class="line">    <span class="comment">// 是否对js文件进行编译</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否对js文件进行类型检查</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Emit */</span></span><br><span class="line">    <span class="comment">// 只是需要ts检测文件的时候 不生成编译后的文件</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: false,</span></span><br><span class="line">    <span class="comment">// 存在没有通过ts检测的情况 默认false 不会进行编译</span></span><br><span class="line">    <span class="comment">// &quot;noEmitOnError&quot;: true,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Type Checking */</span></span><br><span class="line">    <span class="comment">// 开启所有的严格检查 建议开启 为true关于严格检查的会默认开启 不需要的分别设置</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来设置编译后的文件是否使用严格模式 对应的js文件中&#x27;use strict&#x27;; 浏览器执行效率会更高</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,</span></span><br><span class="line">    <span class="comment">// 不能存在出现隐式的any类型</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitAny&quot;: true,</span></span><br><span class="line">    <span class="comment">// 不能出现类型不明的this 默认false</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true, </span></span><br><span class="line">    <span class="comment">// 严格的空值检查 默认false</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,</span></span><br><span class="line">    <span class="comment">// 严格检查函数的类型</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,</span></span><br><span class="line">    <span class="comment">// 严格检查 call apply bind的参数列表</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,</span></span><br><span class="line">    <span class="comment">// 严格检查属性是否初始化</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 检查未使用的局部变量</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true, </span></span><br><span class="line">    <span class="comment">// 检查未使用的参数</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,</span></span><br><span class="line">    <span class="comment">// 检查函数没有隐式的返回值</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,</span></span><br><span class="line">    <span class="comment">// 检查不可达代码 true: 忽略； false: 不可达代码将会引起错误</span></span><br><span class="line">    <span class="comment">// &quot;allowUnreachableCode&quot;: true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Algorithm</title>
      <link href="/posts/6681b8234e82/"/>
      <url>/posts/6681b8234e82/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Algorithm"><a href="#React-Algorithm" class="headerlink" title="React Algorithm"></a>React Algorithm</h1><h2 id="位运算（bit-operation）"><a href="#位运算（bit-operation）" class="headerlink" title="位运算（bit-operation）"></a>位运算（bit-operation）</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>位运算在计算机中作为非常底层的运算，速度快，但不太直观且不支持整数运算。</p><ul><li>位运算只能在整型变量之间进行运算</li><li>js 中的Number类型在底层都是以浮点数(参考 IEEE754 标准)进行存储</li><li>js 中所有的按位操作符的操作数都会被转成补码形式的有符号32位整数</li></ul><table><thead><tr><th>位运算</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>按位与(<code>&amp;</code>)</td><td><code>a &amp; b</code></td><td>对于每一个比特位,两个操作数都为 1 时, 结果为 1, 否则为 0</td></tr><tr><td>按位或(<code>|</code>)</td><td><code>a | b</code></td><td>对于每一个比特位,两个操作数都为 0 时, 结果为 0, 否则为 1</td></tr><tr><td>按位异或(<code>^</code>)</td><td><code>a ^ b</code></td><td>对于每一个比特位,两个操作数相同时, 结果为 0, 否则为 1</td></tr><tr><td>按位非(<code>~</code>)</td><td><code>~ a</code></td><td>反转操作数的比特位, 即 0 变成 1, 1 变成 0</td></tr><tr><td>左移(<code>&lt;&lt;</code>)</td><td><code>a &lt;&lt; b</code></td><td>将 a 的二进制形式向左移 b (&lt; 32) 比特位, 右边用 0 填充</td></tr><tr><td>有符号右移(<code>&gt;&gt;</code>)</td><td><code>a &gt;&gt; b</code></td><td>将 a 的二进制形式向右移 b (&lt; 32) 比特位, 丢弃被移除的位, 左侧以最高位来填充</td></tr><tr><td>无符号右移(<code>&gt;&gt;&gt;</code>)</td><td><code>a &gt;&gt;&gt; b</code></td><td>将 a 的二进制形式向右移 b (&lt; 32) 比特位, 丢弃被移除的位, 并用 0 在左侧填充</td></tr></tbody></table><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><ol><li>定义一些枚举常量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="number">1</span> &lt;&lt; <span class="number">0</span>; <span class="comment">// 0b00000001</span></span><br><span class="line"><span class="keyword">const</span> B = <span class="number">1</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 0b00000010</span></span><br><span class="line"><span class="keyword">const</span> C = <span class="number">1</span> &lt;&lt; <span class="number">2</span>; <span class="comment">// 0b00000100</span></span><br></pre></td></tr></table></figure></li><li>位掩码特性 快速操作实现增加、删除、比较<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="number">1</span> &lt;&lt; <span class="number">0</span>; <span class="comment">// 0b00000001</span></span><br><span class="line"><span class="keyword">const</span> B = <span class="number">1</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 0b00000010</span></span><br><span class="line"><span class="keyword">const</span> C = <span class="number">1</span> &lt;&lt; <span class="number">2</span>; <span class="comment">// 0b00000100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ABC</span> = A | B | C; <span class="comment">// 0b00000111</span></span><br><span class="line"><span class="comment">// 删除属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">AB</span> = <span class="variable constant_">ABC</span> &amp; ~C; <span class="comment">// 0b00000011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性比较</span></span><br><span class="line"><span class="comment">// 1. AB当中包含B</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="variable constant_">AB</span> &amp; B) === B); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 2. AB当中不包含C</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="variable constant_">AB</span> &amp; C) === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 3. A和B相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A === B); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="react中使用"><a href="#react中使用" class="headerlink" title="react中使用"></a>react中使用</h3><p><strong>优先级管理 lanes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型定义</span></span><br><span class="line"><span class="keyword">export</span> opaque type <span class="title class_">Lanes</span> = number;</span><br><span class="line"><span class="keyword">export</span> opaque type <span class="title class_">Lane</span> = number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoLanes</span>: <span class="title class_">Lanes</span> = <span class="comment">/*                        */</span> <span class="number">0b0000000000000000000000000000000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*                          */</span> <span class="number">0b0000000000000000000000000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">SyncLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*                        */</span> <span class="number">0b0000000000000000000000000000001</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">SyncBatchedLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*                 */</span> <span class="number">0b0000000000000000000000000000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">InputDiscreteHydrationLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*      */</span> <span class="number">0b0000000000000000000000000000100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InputDiscreteLanes</span>: <span class="title class_">Lanes</span> = <span class="comment">/*                    */</span> <span class="number">0b0000000000000000000000000011000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InputContinuousHydrationLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*           */</span> <span class="number">0b0000000000000000000000000100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InputContinuousLanes</span>: <span class="title class_">Lanes</span> = <span class="comment">/*                  */</span> <span class="number">0b0000000000000000000000011000000</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NonIdleLanes</span> = <span class="comment">/*                                 */</span> <span class="number">0b0000111111111111111111111111111</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">IdleHydrationLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*               */</span> <span class="number">0b0001000000000000000000000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">IdleLanes</span>: <span class="title class_">Lanes</span> = <span class="comment">/*                             */</span> <span class="number">0b0110000000000000000000000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">OffscreenLane</span>: <span class="title class_">Lane</span> = <span class="comment">/*                   */</span> <span class="number">0b1000000000000000000000000000000</span>;</span><br></pre></td></tr></table></figure><p>方法定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分离出最高优先级 得到此lanes中最右边的的1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHighestPriorityLane</span>(<span class="params">lanes: Lanes</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> lanes &amp; -lanes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分离出最低优先级</span></span><br><span class="line"><span class="comment">// clz32(lanes) =&gt; https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLowestPriorityLane</span>(<span class="params">lanes: Lanes</span>): <span class="title class_">Lane</span> &#123;</span><br><span class="line">  <span class="comment">// This finds the most significant non-zero bit.</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="number">31</span> - <span class="title function_">clz32</span>(lanes);</span><br><span class="line">  <span class="keyword">return</span> index &lt; <span class="number">0</span> ? <span class="title class_">NoLanes</span> : <span class="number">1</span> &lt;&lt; index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行上下文 ExecutionContext</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoContext</span> = <span class="comment">/*             */</span> <span class="number">0b0000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BatchedContext</span> = <span class="comment">/*               */</span> <span class="number">0b0000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventContext</span> = <span class="comment">/*                 */</span> <span class="number">0b0000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DiscreteEventContext</span> = <span class="comment">/*         */</span> <span class="number">0b0000100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LegacyUnbatchedContext</span> = <span class="comment">/*       */</span> <span class="number">0b0001000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RenderContext</span> = <span class="comment">/*                */</span> <span class="number">0b0010000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CommitContext</span> = <span class="comment">/*                */</span> <span class="number">0b0100000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">RetryAfterError</span> = <span class="comment">/*       */</span> <span class="number">0b1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Describes where we are in the React execution stack</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">executionContext</span>: <span class="title class_">ExecutionContext</span> = <span class="title class_">NoContext</span>;</span><br></pre></td></tr></table></figure><p>方法定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scheduleUpdateOnFiber函数中包含了好多关于executionContext的判断(都是使用位运算)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">scheduleUpdateOnFiber</span>(<span class="params"></span></span><br><span class="line"><span class="params">  fiber: Fiber,</span></span><br><span class="line"><span class="params">  lane: Lane,</span></span><br><span class="line"><span class="params">  eventTime: number,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root === workInProgressRoot) &#123;</span><br><span class="line">    <span class="comment">// 判断: executionContext 不包含 RenderContext</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      deferRenderPhaseUpdateToNextBatch ||</span><br><span class="line">      (executionContext &amp; <span class="title class_">RenderContext</span>) === <span class="title class_">NoContext</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (lane === <span class="title class_">SyncLane</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// 判断: executionContext 包含 LegacyUnbatchedContext</span></span><br><span class="line">      (executionContext &amp; <span class="title class_">LegacyUnbatchedContext</span>) !== <span class="title class_">NoContext</span> &amp;&amp;</span><br><span class="line">      <span class="comment">// 判断: executionContext 不包含 RenderContext或CommitContext</span></span><br><span class="line">      (executionContext &amp; (<span class="title class_">RenderContext</span> | <span class="title class_">CommitContext</span>)) === <span class="title class_">NoContext</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先遍历（dfs）"><a href="#深度优先遍历（dfs）" class="headerlink" title="深度优先遍历（dfs）"></a>深度优先遍历（dfs）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>是一种用于遍历或搜索树或者图的算法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现方式1 递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">nodes</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;探寻阶段: &#x27;</span>, nodes.<span class="property">name</span>);</span><br><span class="line">  nodes.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dfs</span>(child);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;回溯阶段: &#x27;</span>, nodes.<span class="property">name</span>)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方式2 栈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  stack.<span class="title function_">push</span>(node);</span><br><span class="line">  <span class="comment">// 栈顶元素还存在, 就继续循环</span></span><br><span class="line">  <span class="keyword">while</span> ((node = stack[stack.<span class="property">length</span> - <span class="number">1</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">visited</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;回溯阶段: &#x27;</span>, node.<span class="property">name</span>);</span><br><span class="line">      <span class="comment">// 回溯完成, 弹出该元素</span></span><br><span class="line">      stack.<span class="title function_">pop</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;探寻阶段: &#x27;</span>, node.<span class="property">name</span>);</span><br><span class="line">      node.<span class="property">visited</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 利用栈的先进后出的特性, 倒序将节点送入栈中</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = node.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        stack.<span class="title function_">push</span>(node.<span class="property">children</span>[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react中使用-1"><a href="#react中使用-1" class="headerlink" title="react中使用"></a>react中使用</h3><ol><li>深度优先遍历在react中的经典应用场景是ReactElement与fiber树的构造过程</li><li>使用context时，深度优先查找消费的context节点</li></ol><h2 id="堆排序（heap-sort）"><a href="#堆排序（heap-sort）" class="headerlink" title="堆排序（heap-sort）"></a>堆排序（heap-sort）</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>最常见的堆结构就是二叉堆。二叉堆也是完全二叉树（注意和满二叉树区分），即对于节点为n，深度为k的二叉树与节点n，深度为k的满二叉树除了最后一层外一一对应。<br>堆排序利用二叉根的特性，对根节点循环提取，从而达到排序目的，时间复杂度o(nlogn)。</p><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ol><li>父节点的值大于等于子节点的值（最大堆），父节点的值小于等于子节点的值（最小堆）</li><li>假设一个数组[k0, k1, k2, …kn]下标从 0 开始. 则ki &lt;= k2i+1,ki &lt;= k2i+2 或者 ki &gt;= k2i+1,ki &gt;= k2i+2 (i = 0,1,2,3 .. n/2)</li></ol><h3 id="排序使用"><a href="#排序使用" class="headerlink" title="排序使用"></a>排序使用</h3><ol><li>一次循环完 heapInsert构造大顶堆或小顶堆 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapInsert</span>(<span class="params">arr, curIndex</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr[curIndex] &gt; arr[((curIndex - <span class="number">1</span>) / <span class="number">2</span>) &gt;&gt;&gt; <span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="title function_">swap</span>(arr, curIndex, ((curIndex - <span class="number">1</span>) / <span class="number">2</span>) &gt;&gt;&gt; <span class="number">0</span>)</span><br><span class="line">    curIndex = ((curIndex - <span class="number">1</span>) / <span class="number">2</span>) &gt;&gt;&gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 构造大顶堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">heapInsert</span>(arr, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环提取根节点<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向下调整的过程 始终保持一个大顶堆状态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, index, size</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (leftIndex &lt; size) &#123;</span><br><span class="line">    <span class="comment">// 左右子树最大的一位</span></span><br><span class="line">    <span class="keyword">let</span> largestBtw =</span><br><span class="line">      leftIndex + <span class="number">1</span> &lt; size &amp;&amp; arr[leftIndex + <span class="number">1</span>] &gt; arr[leftIndex]</span><br><span class="line">        ? leftIndex + <span class="number">1</span></span><br><span class="line">        : leftIndex</span><br><span class="line">    <span class="keyword">let</span> largest = arr[index] &gt; arr[largestBtw] ? index : largestBtw</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果都大于子树 停止</span></span><br><span class="line">    <span class="keyword">if</span> (largest === index) <span class="keyword">break</span></span><br><span class="line">    <span class="title function_">swap</span>(arr, index, largest)</span><br><span class="line">    index = largest</span><br><span class="line">    leftIndex = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 循环提取根节点</span></span><br><span class="line"><span class="comment">// 2.1 将根节点与末尾元素交换 heapSize减1</span></span><br><span class="line"><span class="comment">// 2.2 交换之后进行向下调整</span></span><br><span class="line"><span class="keyword">let</span> heapSize = arr.<span class="property">length</span></span><br><span class="line"><span class="keyword">while</span> (heapSize--) &#123;</span><br><span class="line"> <span class="title function_">swap</span>(arr, <span class="number">0</span>, heapSize)</span><br><span class="line"> <span class="comment">// 向下调整达到保持大顶堆</span></span><br><span class="line"> <span class="title function_">heapify</span>(arr, <span class="number">0</span>, heapSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="react中使用-2"><a href="#react中使用-2" class="headerlink" title="react中使用"></a>react中使用</h3><p>对于二叉堆的应用在<code>scheduler</code>，有两个数组taskQueue和timerQueue，它们都是以最小堆的形式存储。</p><h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>栈是一个先入后出(FILO-FirstInLastOut)的有序列表。</p><h3 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h3><ul><li>先入后出，后入先出</li><li>除头尾节点之外, 每个元素有一个前驱, 一个后继</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataStore</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 压栈</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataStore</span>[<span class="variable language_">this</span>.<span class="property">top</span>++] = element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 弹栈</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dataStore</span>[--<span class="variable language_">this</span>.<span class="property">top</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 预览栈顶元素</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dataStore</span>[<span class="variable language_">this</span>.<span class="property">top</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检测栈内存储了多少个元素</span></span><br><span class="line">  <span class="title function_">length</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">top</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react中使用-3"><a href="#react中使用-3" class="headerlink" title="react中使用"></a>react中使用</h3><ul><li>context状态管理 ReactFiberStack.js中定义</li><li>executionContext 执行上下文</li></ul><h2 id="链表操作-（linked-list）"><a href="#链表操作-（linked-list）" class="headerlink" title="链表操作 （linked-list）"></a>链表操作 （linked-list）</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>链表是一种常见的基础数据，是一种线性表。</p><h3 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h3><ul><li>物理上不连续，逻辑上连续</li><li>单向链表: 每个节点包含两个域, 一个信息域和一个指针域. 这个指针指向列表中的下一个节点, 而最后一个节点则指向一个空值</li><li>双向链表: 每个节点有两个连接, 一个指向前一个节点(第一个节点指向空值), 而另一个指向下一个节点(最后一个节点指向空值)</li><li>循环链表: 在单向链表的基础上, 首节点和末节点被连接在一起</li></ul><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Node节点类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Node</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LinkedList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;head&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找node节点的前一个节点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">findPrevious</span> = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (currentNode &amp;&amp; currentNode.<span class="property">next</span> !== node) &#123;</span><br><span class="line">      currentNode = currentNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在node后插入新节点newElement</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">insert</span> = <span class="keyword">function</span>(<span class="params">name, node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(name);</span><br><span class="line">    newNode.<span class="property">next</span> = node.<span class="property">next</span>;</span><br><span class="line">    node.<span class="property">next</span> = newNode;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除节点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">remove</span> = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> previousNode = <span class="variable language_">this</span>.<span class="title function_">findPrevious</span>(node);</span><br><span class="line">    <span class="keyword">if</span> (previousNode) &#123;</span><br><span class="line">      previousNode.<span class="property">next</span> = node.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反转链表</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">reverse</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">const</span> tempNode = current.<span class="property">next</span>;</span><br><span class="line">      <span class="comment">// 重新设置next指针, 使其指向前一个节点</span></span><br><span class="line">      current.<span class="property">next</span> = prev;</span><br><span class="line">      <span class="comment">// 游标后移</span></span><br><span class="line">      prev = current;</span><br><span class="line">      current = tempNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重新设置head节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = current;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react中使用-4"><a href="#react中使用-4" class="headerlink" title="react中使用"></a>react中使用</h3><ul><li>fiber对象</li><li>hook对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react-algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http</title>
      <link href="/posts/c76910453d25/"/>
      <url>/posts/c76910453d25/</url>
      
        <content type="html"><![CDATA[<h1 id="Http-Cache"><a href="#Http-Cache" class="headerlink" title="Http Cache"></a>Http Cache</h1><p>HTTP缓存是web应用程序中提高性能和减少资源浪费的机制，它可以让浏览器缓存已经访问过的资源，以便以后访问时可以从缓存中<br>加载，而不需要重新下载。</p><h2 id="强缓存与协商缓存"><a href="#强缓存与协商缓存" class="headerlink" title="强缓存与协商缓存"></a>强缓存与协商缓存</h2><h3 id="强缓存-Expires-Cache-control"><a href="#强缓存-Expires-Cache-control" class="headerlink" title="强缓存 (Expires / Cache-control )"></a>强缓存 (Expires / Cache-control )</h3><p>强缓存是一种HTTP缓存机制，它使浏览器可以缓存资源，并在下一次请求时直接从缓存中加载资源，而不需要向服务器发送请求。浏览器通过检查响应头中的Expires和Cache-Control字段来判断缓存是否过期。如果缓存没有过期，则使用缓存中的资源，否则会向服务器发送请求以获取新的资源</p><ul><li>Expires（http1.0）如果改了电脑本地时间 那么可能会出现误差</li><li>Cache-control（http1.1） 优先级更高 <ul><li>Public: 资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存</li><li>Private: 默认值 只能被浏览器缓存</li><li>no-store: 不使用任何缓存 每次都得向服务起发起请求</li><li>no-cache: 请求头设置则告诉浏览器不应该使用浏览器缓存 每次请求都从服务器获取最新的相应 响应头设置 表示浏览器不应该缓存相应</li></ul></li></ul><h3 id="协商缓存-Last-Modified-Etag"><a href="#协商缓存-Last-Modified-Etag" class="headerlink" title="协商缓存 (Last-Modified / Etag)"></a>协商缓存 (Last-Modified / Etag)</h3><p>协商缓存是另一种HTTP缓存机制，它在缓存资源过期时使用，它允许服务器和客户端之间进行通信，以确定是否需要重新下载资源。当浏览器向服务器发送请求时，服务器可以在响应头中添加Etag或Last-Modified字段来标识资源的标识符或最后修改时间。当浏览器再次请求该资源时，它会向服务器发送一个带有If-None-Match或If-Modified-Since的请求头，以检查资源是否发生了更改。如果资源没有更改，则服务器将返回304 Not Modified响应，浏览器将从缓存中加载资源，否则将返回新的资源</p><ul><li>Last-Modified（http1.0）=&gt; If-Modified-Since<ul><li>处理逻辑: 第一次请求资源的时候，响应头中会添加Last-Modified代表资源最后修改时间，当再次请求该资源时，浏览器会加上If-Modified-Since字段，值为Last-Modified的值，服务端判断，如果相等，说明资源未修改，返回304，否则返回新的Last-Modified.</li><li>缺点：<ol><li>短时间内修改资源，但是Last-Modified不会改变，如此返回304，其实并不是新的资源。</li><li>修改内容，之后又修改成之前的样子，我们认为资源是没有改变，但Last-Modified的值会改变，记录文件的最后修改时间，此时服务器判断Last-Modified不同，返回数据，重新给了新的Last-Modified值，实际上应该使用缓存。</li></ol></li></ul></li><li>Etag (http1.1) =&gt; If-None-Match（优先级高 类似于上面的Cache-control）<ul><li>处理逻辑: Etag一般是由文件内容生成的hash，代表资源的唯一性，当资源修改后，Etag会改变，当浏览器再次请求时添加If-no-match带上Etag的值，服务端判断是否使用缓存。</li></ul></li></ul><p>在实际开发中，我们可以通过设置响应头中的Cache-Control字段来控制缓存的行为，例如max-age指定缓存的最大有效期，no-cache指示缓存需要重新验证，no-store则完全禁止缓存。</p><h2 id="http1-0-1-1-2-0及3的区别？"><a href="#http1-0-1-1-2-0及3的区别？" class="headerlink" title="http1.0 1.1 2.0及3的区别？"></a>http1.0 1.1 2.0及3的区别？</h2><p>HTTP协议的版本有HTTP/1.0、HTTP/1.1和HTTP/2，这些版本之间的主要区别在于它们的<strong>性能和功能方面</strong>的不同。</p><ul><li>HTTP/1.0仅支持传输文本和图像等静态内容，并需要建立多个TCP连接，导致网络延迟。</li><li>HTTP/1.1使用持久连接和管道化请求，允许多个请求和响应共享一个TCP连接，从而提高了性能。</li><li>HTTP/2使用二进制协议和多路复用，提高了解析速度和性能，并支持服务器推送，加速页面加载时间</li><li>HTTP/3是基于QUIC（Quick UDP Internet Connections）协议的，QUIC是一种基于UDP协议的传输协议，与TCP协议相比，具有更快的连接建立时间和更少的队头阻塞问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> browser </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http cache </tag>
            
            <tag> http history </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
